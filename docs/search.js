window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "gistools", "modulename": "gistools", "kind": "module", "doc": "<p>A Python package for working with geospatial data:</p>\n\n<ul>\n<li><code>gistools.geometry</code>: collection of functions and classes for working with geospatial vector data.   </li>\n<li><code>gistools.gmaps</code>: functions for interacting with the Google Maps API.</li>\n<li><code>gistools.strings</code>: collection of functions for string manipulation, text cleaning, and similarity calculation.</li>\n<li><code>gistools.utils</code>: utility functions.  </li>\n</ul>\n\n<p>Enjoy!</p>\n"}, {"fullname": "gistools.geometry", "modulename": "gistools.geometry", "kind": "module", "doc": "<p>Collection of utility functions for working with geographic data in Python.</p>\n\n<p>This module provides a collection of functions and classes for working with geographic data, including:</p>\n\n<ul>\n<li>Latitude/Longitude Handling.</li>\n<li>Coordinate Transformations.</li>\n<li>Distance Calculations.</li>\n<li>Unit Conversions.</li>\n<li>Nearest Point Finding.</li>\n<li>Format Transformations (Polyline Decoding, Shapely Conversion).</li>\n</ul>\n\n<p><strong>Constants</strong></p>\n\n<ul>\n<li><code>EARTH_RADIUS</code>: The Earth's radius in kilometers (6378.388). See <a href=\"https://en.wikipedia.org/wiki/Earth_radius\">Earth Radius in Wikipedia</a>.</li>\n<li><code>POINT</code>: A list of attributes defining the structure of a Point object.</li>\n</ul>\n\n<p><strong>Latitude/Longitude Handling</strong></p>\n\n<ul>\n<li><code>latlon</code>: Extracts latitude and longitude from various input formats, such as dictionaries, lists, tuples, and Shapely points.</li>\n<li><code>latlon2str</code>: Converts latitude and longitude to a string representation.</li>\n</ul>\n\n<p><strong>Coordinate Transformations</strong></p>\n\n<ul>\n<li><code>gps2xy</code>: Converts Earth-centered coordinates (latitude, longitude) to Cartesian (x,y,z) coordinates.</li>\n</ul>\n\n<p><strong>Distance Calculations</strong></p>\n\n<ul>\n<li><code>distance_euclidean</code>: Calculates the Euclidean distance between two points.</li>\n<li><code>distance_manhattan</code>: Calculates the Manhattan distance (or Taxicab geometry) between two points.</li>\n<li><code>distance_haversine</code>: Calculates the geographical distance (or great-circle) between two points using the Haversine formula.</li>\n</ul>\n\n<p><strong>Unit Conversions</strong></p>\n\n<ul>\n<li><code>kilometers_to_miles</code>: Converts kilometers to miles.</li>\n<li><code>miles_to_kilometers</code>: Converts miles to kilometers.</li>\n</ul>\n\n<p><strong>Nearest Point Finding</strong></p>\n\n<ul>\n<li><code>find_nearest_point</code>: Finds the nearest point from a given row to a set of destination points based on a specified column.</li>\n</ul>\n\n<p><strong>Polyline Decoding</strong></p>\n\n<ul>\n<li><code>decode_polyline</code>: Decodes a polyline encoded string into a list of latitude/longitude coordinates.</li>\n</ul>\n\n<p><strong>Shapely Conversion</strong></p>\n\n<ul>\n<li><code>to_shapely</code>: Converts a list of coordinates into a Shapely MultiLineString object.</li>\n</ul>\n\n<p><strong>Class Point</strong></p>\n\n<ul>\n<li>Class <code>Point</code> provides a convenient way to represent and work with geographic points in your applications.</li>\n</ul>\n"}, {"fullname": "gistools.geometry.EARTH_RADIUS", "modulename": "gistools.geometry", "qualname": "EARTH_RADIUS", "kind": "variable", "doc": "<p>The Earth's radius in kilometers (6378.388). See <a href=\"https://en.wikipedia.org/wiki/Earth_radius\">Earth Radius in Wikipedia</a>.</p>\n", "default_value": "6378.388"}, {"fullname": "gistools.geometry.latlon", "modulename": "gistools.geometry", "qualname": "latlon", "kind": "function", "doc": "<p>Extracts latitude and longitude from various input formats.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>arg (dict, list, tuple, shapely.geometry.Point)</strong>: The input containing lat/lng information.</li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>tuple</strong>: A tuple containing (latitude, longitude) if successful, otherwise (None, None).</li>\n</ul>\n\n<p>Raises:  </p>\n\n<ul>\n<li><strong>TypeError</strong>: If the input format is not recognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.latlon2str", "modulename": "gistools.geometry", "qualname": "latlon2str", "kind": "function", "doc": "<p>Converts latitude and longitude to a string representation.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>latitude (float)</strong>: The latitude value.  </li>\n<li><strong>longitude (float)</strong>: The longitude value.    </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>str</strong>: The formatted latitude/longitude string in the format \"latitude,longitude\".</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.gps2xy", "modulename": "gistools.geometry", "qualname": "gps2xy", "kind": "function", "doc": "<p>Converts Earth-centered coordinates (latitude, longitude) to Cartesian (x,y,z) coordinates. <br />\nSee <a href=\"http://stackoverflow.com/questions/1185408/converting-from-longitude-latitude-to-cartesian-coordinates\">stackoverflow</a>.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>lat (float)</strong>: Latitude in degrees.  </li>\n<li><strong>lng (float)</strong>: Longitude in degrees.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing 'x', 'y', and 'z' Cartesian coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lat</span>, </span><span class=\"param\"><span class=\"n\">lng</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.distance_euclidean", "modulename": "gistools.geometry", "qualname": "distance_euclidean", "kind": "function", "doc": "<p>Calculates the Euclidean distance between two points. <br />\n$d(p1, p2) = \\sqrt(p1 - p2)^2$</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>p1 (dict)</strong>: A dictionary containing 'x' and 'y' coordinates of the first point.  </li>\n<li><strong>p2 (dict)</strong>: A dictionary containing 'x' and 'y' coordinates of the second point.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>float</strong>: The Euclidean distance between the two points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.distance_manhattan", "modulename": "gistools.geometry", "qualname": "distance_manhattan", "kind": "function", "doc": "<p>Calculates the Manhattan distance (or Taxicab geometry) between two points.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>p1 (dict)</strong>: A dictionary containing 'x' and 'y' coordinates of the first point.  </li>\n<li><strong>p2 (dict)</strong>: A dictionary containing 'x' and 'y' coordinates of the second point.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li>float: The Manhattan distance between the two points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.distance_haversine", "modulename": "gistools.geometry", "qualname": "distance_haversine", "kind": "function", "doc": "<p>Calculates the geographical distance (or great-circle) between two points using the Haversine formula.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>p1 (dict, list, tuple, shapely.geometry.Point)</strong>: The first point.  </li>\n<li><strong>p2 (dict, list, tuple, shapely.geometry.Point)</strong>: The second point.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>float</strong>: The geographical distance in meters between the two points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p1</span>, </span><span class=\"param\"><span class=\"n\">p2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.kilometers_to_miles", "modulename": "gistools.geometry", "qualname": "kilometers_to_miles", "kind": "function", "doc": "<p>Converts kilometers to miles. 1 Kilometer = 0.621371 Mile.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>km (float)</strong>: The distance in kilometers.  </li>\n<li><strong>ratio (float, optional)</strong>: The conversion ratio (1 Kilometer = 0.621371 Mile). Defaults to 0.621371.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>float</strong>: The distance in miles.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">km</span>, </span><span class=\"param\"><span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mf\">0.621371</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.miles_to_kilometers", "modulename": "gistools.geometry", "qualname": "miles_to_kilometers", "kind": "function", "doc": "<p>Converts miles to kilometers. 1 Kilometer = 0.621371 Mile.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>mi (float)</strong>: The distance in miles.  </li>\n<li><strong>ratio (float, optional)</strong>: The conversion ratio (1 Kilometer = 0.621371 Mile). Defaults to 0.621371.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>float</strong>: The distance in kilometers.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mi</span>, </span><span class=\"param\"><span class=\"n\">ratio</span><span class=\"o\">=</span><span class=\"mf\">0.621371</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.find_nearest_point", "modulename": "gistools.geometry", "qualname": "find_nearest_point", "kind": "function", "doc": "<p>Finds the nearest point from a given row to a set of destination points based on a specified column.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>row (pandas.Series)</strong>: The row containing the point to find the nearest point to.  </li>\n<li><strong>destination (pandas.DataFrame)</strong>: The DataFrame containing the destination points.  </li>\n<li><strong>column (str)</strong>: The column name in the destination DataFrame to retrieve the value from.  </li>\n<li><strong>geom_col (str, optional)</strong>: The name of the geometry column in both row and destination. Defaults to 'geometry'.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>object</strong>: The value from the specified column in the destination DataFrame corresponding to the nearest point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">row</span>, </span><span class=\"param\"><span class=\"n\">destination</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">geom_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;geometry&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.decode_polyline", "modulename": "gistools.geometry", "qualname": "decode_polyline", "kind": "function", "doc": "<p>Decodes a polyline encoded string into a list of latitude/longitude coordinates.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>encoded (str)</strong>: The encoded polyline string.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>list</strong>: A list of [longitude, latitude] coordinates.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoded</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.to_shapely", "modulename": "gistools.geometry", "qualname": "to_shapely", "kind": "function", "doc": "<p>Converts a list of coordinates into a Shapely MultiLineString object.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>points (list)</strong>: A list of [longitude, latitude] coordinates.  </li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>shapely.geometry.MultiLineString</strong>: The Shapely MultiLineString object representing the points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.POINT", "modulename": "gistools.geometry", "qualname": "POINT", "kind": "variable", "doc": "<p>A list of attributes defining the structure of a Point object.</p>\n", "default_value": "[&#x27;id&#x27;, &#x27;external_id&#x27;, &#x27;name&#x27;, &#x27;description&#x27;, &#x27;longitude&#x27;, &#x27;latitude&#x27;, &#x27;plus_code&#x27;, &#x27;geometry&#x27;]"}, {"fullname": "gistools.geometry.Point", "modulename": "gistools.geometry", "qualname": "Point", "kind": "class", "doc": "<p>Represents a geographic point with latitude, longitude, and optional metadata.</p>\n\n<p>Attributes: <br />\n        - <code>id</code>(str, optional): Unique identifier for the point. <br />\n        - <code>external_id</code>(str, optional): External identifier for the point. <br />\n        - <code>name</code>(str, optional): Name of the point. <br />\n        - <code>description</code>(str, optional): Description of the point. <br />\n        - <code>longitude</code>(float): Longitude coordinate of the point. <br />\n        - <code>latitude</code>(float): Latitude coordinate of the point. <br />\n        - <code>plus_code</code>(str, optional): Plus Code representation of the point. <br />\n        - <code>code_length</code>(int): Length of the Plus Code to generate. Defaults to 10.  </p>\n\n<p>Methods: <br />\n        - <code>__init__</code>(data=None, code_length=10): Initializes a Point object. <br />\n        - <code>__repr__</code>(): Returns a string representation of the Point object. <br />\n        - <code>__getitem__</code>(key): Allows accessing attributes as dictionary keys. <br />\n        - <code>__setitem__</code>(key, value): Allows setting attributes as dictionary keys. <br />\n        - <code>__eq__</code>(other): Checks if two Point objects are equal based on their data. <br />\n        - <code>__ne__</code>(other): Checks if two Point objects are not equal based on their data. <br />\n        - <code>data</code>: Returns the data dictionary containing all attributes. <br />\n        - <code>id</code>: Returns the ID of the point. <br />\n        - <code>name</code>: Returns the name of the point. <br />\n        - <code>latitude</code>: Returns the latitude of the point. <br />\n        - <code>longitude</code>: Returns the longitude of the point. <br />\n        - <code>coordinates</code>: Returns a tuple of latitude and longitude coordinates. <br />\n        - <code>code_length</code>: Returns the length of the Plus Code. <br />\n        - <code>plus_code</code>: Returns the Plus Code representation of the point. <br />\n        - <code>copy()</code>: Returns a shallow copy of the Point object. <br />\n        - <code>deepcopy()</code>: Returns a deep copy of the Point object. <br />\n        - <code>distance</code>(other): Calculates the Haversine distance between this point and another. <br />\n        - <code>to_dict</code>(): Returns the data dictionary containing all attributes. <br />\n        - <code>to_json</code>(indent=4): Serializes the object to a JSON formatted string. <br />\n        - <code>to_WKT</code>(precision=6): Returns the Well-Known Text (WKT) representation of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.__init__", "modulename": "gistools.geometry", "qualname": "Point.__init__", "kind": "function", "doc": "<p>Initializes a Point object.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>data (dict, optional)</strong>: Dictionary containing point data. Defaults to None.</li>\n<li><strong>code_length (int, optional)</strong>: Length of the Plus Code to generate. Defaults to 10.</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li><strong>TypeError</strong>: If data is not a dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">code_length</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "gistools.geometry.Point.data", "modulename": "gistools.geometry", "qualname": "Point.data", "kind": "variable", "doc": "<p>Returns the data dictionary containing all attributes.</p>\n"}, {"fullname": "gistools.geometry.Point.id", "modulename": "gistools.geometry", "qualname": "Point.id", "kind": "variable", "doc": "<p>Returns the ID of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.external_id", "modulename": "gistools.geometry", "qualname": "Point.external_id", "kind": "variable", "doc": "<p>Returns the external identifier of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.name", "modulename": "gistools.geometry", "qualname": "Point.name", "kind": "variable", "doc": "<p>Returns the name of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.description", "modulename": "gistools.geometry", "qualname": "Point.description", "kind": "variable", "doc": "<p>Returns the description of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.latitude", "modulename": "gistools.geometry", "qualname": "Point.latitude", "kind": "variable", "doc": "<p>Returns the latitude of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.longitude", "modulename": "gistools.geometry", "qualname": "Point.longitude", "kind": "variable", "doc": "<p>Returns the longitude of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.coordinates", "modulename": "gistools.geometry", "qualname": "Point.coordinates", "kind": "variable", "doc": "<p>Returns a tuple of latitude and longitude coordinates.</p>\n"}, {"fullname": "gistools.geometry.Point.code_length", "modulename": "gistools.geometry", "qualname": "Point.code_length", "kind": "variable", "doc": "<p>Returns the length of the Plus Code.</p>\n"}, {"fullname": "gistools.geometry.Point.plus_code", "modulename": "gistools.geometry", "qualname": "Point.plus_code", "kind": "variable", "doc": "<p>Returns the Plus Code representation of the point.</p>\n"}, {"fullname": "gistools.geometry.Point.copy", "modulename": "gistools.geometry", "qualname": "Point.copy", "kind": "function", "doc": "<p>Returns a shallow copy of the Point object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.Point.deepcopy", "modulename": "gistools.geometry", "qualname": "Point.deepcopy", "kind": "function", "doc": "<p>Returns a deep copy of the Point object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.Point.distance", "modulename": "gistools.geometry", "qualname": "Point.distance", "kind": "function", "doc": "<p>Calculates the Haversine distance between this point and another.</p>\n\n<p>Args:  </p>\n\n<ul>\n<li><strong>other (Point)</strong>: The other point to calculate the distance to.</li>\n</ul>\n\n<p>Returns:  </p>\n\n<ul>\n<li><strong>float</strong>: The distance in meters between the two points.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.Point.to_dict", "modulename": "gistools.geometry", "qualname": "Point.to_dict", "kind": "function", "doc": "<p>Returns the data dictionary containing all attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.Point.to_json", "modulename": "gistools.geometry", "qualname": "Point.to_json", "kind": "function", "doc": "<p>Serialize object to a JSON formatted string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>indent (int, optional)</strong>: object members will be pretty-printed with that indent level. <br />\nAn indent level of 0 will only insert newlines. <br />\nNone is the most compact representation. Defaults to 4.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: JSON representation of this object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.geometry.Point.to_WKT", "modulename": "gistools.geometry", "qualname": "Point.to_WKT", "kind": "function", "doc": "<p>Returns the Well-Known Text (WKT) representation of the point.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>precision(int, optional)</strong>: the number of decimal places to round the coordinates to. <br />\nDefaults to 6.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The WKT representation of the point.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"o\">=</span><span class=\"mi\">6</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.gmaps", "modulename": "gistools.gmaps", "kind": "module", "doc": "<p>This module provides functions for interacting with the Google Maps API. <br />\nIt handles authentication, setting API limits, and making API calls for retrieving place information:</p>\n\n<ul>\n<li><code>get_api_key</code>: Retrieves the Google Maps API key from the specified file or environment variable.</li>\n<li><code>set_credentials</code>: Sets up the Google Maps API client with the specified credentials and limits.</li>\n<li><code>get_place_info</code>: Retrieves information about a place based on a given address.</li>\n</ul>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n<li>This module depends on the <a href=\"https://github.com/googlemaps/google-maps-services-python\">googlemaps</a> and <a href=\"https://requests.readthedocs.io/en/latest/\">requests</a> Python packages.  </li>\n<li>Ensure they are installed before using this module.  </li>\n<li>Remember to <a href=\"https://developers.google.com/maps/api-security-best-practices\">protect your Google Maps API key</a> and avoid sharing it publicly.  </li>\n<li>Be aware of the <a href=\"https://developers.google.com/maps/billing-and-pricing/billing\">Google Maps API usage limits and billing</a>.  </li>\n</ul>\n\n<p>The get_place_info() function currently retrieves only basic place information. \nYou can modify it to retrieve more fields by adding them to the fields parameter in the request.</p>\n"}, {"fullname": "gistools.gmaps.set_credentials", "modulename": "gistools.gmaps", "qualname": "set_credentials", "kind": "function", "doc": "<p>Sets up the Google Maps API client with the specified credentials and limits.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>keyfile (str, optional)</strong>: The path to a JSON file containing the API key. <br />\nIf not provided, the environment variable <code>GISTOOLS_GMAPS_KEY_FILE</code> will be used.\nDefaults to None.</li>\n<li><strong>queries_per_minute (int, optional)</strong>: The maximum number of queries allowed per minute. <br />\nDefaults to 3000.</li>\n<li><strong>queries_per_second (int, optional)</strong>: The maximum number of queries allowed per second. <br />\nDefaults to None, which means the limit is not set.</li>\n<li><strong>retry_over_query_limit (bool, optional)</strong>: If True, the client will automatically retry requests that exceed the query limit. <br />\nDefaults to True.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>googlemaps.Client</strong>: A <code>googlemaps.Client</code> object, ready to be used for making API calls.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">keyfile</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">queries_per_minute</span><span class=\"o\">=</span><span class=\"mi\">3000</span>,</span><span class=\"param\">\t<span class=\"n\">queries_per_second</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">retry_over_query_limit</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.gmaps.get_api_key", "modulename": "gistools.gmaps", "qualname": "get_api_key", "kind": "function", "doc": "<p>Retrieves the Google Maps API key from the specified file or environment variable.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>keyfile (str, optional)</strong>: The path to a JSON file containing the API key. <br />\nIf not provided, the environment variable <code>GISTOOLS_GMAPS_KEY_FILE</code> will be used.\nDefaults to None.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The Google Maps API key as a string, or None if the key is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">keyfile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.gmaps.get_place_info", "modulename": "gistools.gmaps", "qualname": "get_place_info", "kind": "function", "doc": "<p>Retrieves information about a place based on a given address using the Google Maps Places API.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>address (str)</strong>: The address to search for.</li>\n<li><strong>api_key (str)</strong>: The Google Maps API key.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>dict</strong>: A dictionary containing the place information if the request was successful, or None if there was an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">address</span>, </span><span class=\"param\"><span class=\"n\">api_key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place", "modulename": "gistools.place", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "gistools.place.BUSINESS_TYPES", "modulename": "gistools.place", "qualname": "BUSINESS_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;accounting&#x27;, &#x27;airport&#x27;, &#x27;amusement_park&#x27;, &#x27;aquarium&#x27;, &#x27;art_gallery&#x27;, &#x27;atm&#x27;, &#x27;bakery&#x27;, &#x27;bank&#x27;, &#x27;bar&#x27;, &#x27;beauty_salon&#x27;, &#x27;bicycle_store&#x27;, &#x27;book_store&#x27;, &#x27;bowling_alley&#x27;, &#x27;bus_station&#x27;, &#x27;cafe&#x27;, &#x27;campground&#x27;, &#x27;car_dealer&#x27;, &#x27;car_rental&#x27;, &#x27;car_repair&#x27;, &#x27;car_wash&#x27;, &#x27;casino&#x27;, &#x27;cemetery&#x27;, &#x27;church&#x27;, &#x27;city_hall&#x27;, &#x27;clothing_store&#x27;, &#x27;convenience_store&#x27;, &#x27;courthouse&#x27;, &#x27;dentist&#x27;, &#x27;department_store&#x27;, &#x27;doctor&#x27;, &#x27;drugstore&#x27;, &#x27;electrician&#x27;, &#x27;electronics_store&#x27;, &#x27;embassy&#x27;, &#x27;fire_station&#x27;, &#x27;florist&#x27;, &#x27;funeral_home&#x27;, &#x27;furniture_store&#x27;, &#x27;gas_station&#x27;, &#x27;gym&#x27;, &#x27;hair_care&#x27;, &#x27;hardware_store&#x27;, &#x27;hindu_temple&#x27;, &#x27;home_goods_store&#x27;, &#x27;hospital&#x27;, &#x27;insurance_agency&#x27;, &#x27;jewelry_store&#x27;, &#x27;laundry&#x27;, &#x27;lawyer&#x27;, &#x27;library&#x27;, &#x27;light_rail_station&#x27;, &#x27;liquor_store&#x27;, &#x27;local_government_office&#x27;, &#x27;locksmith&#x27;, &#x27;lodging&#x27;, &#x27;meal_delivery&#x27;, &#x27;meal_takeaway&#x27;, &#x27;mosque&#x27;, &#x27;movie_rental&#x27;, &#x27;movie_theater&#x27;, &#x27;moving_company&#x27;, &#x27;museum&#x27;, &#x27;night_club&#x27;, &#x27;painter&#x27;, &#x27;park&#x27;, &#x27;parking&#x27;, &#x27;pet_store&#x27;, &#x27;pharmacy&#x27;, &#x27;physiotherapist&#x27;, &#x27;plumber&#x27;, &#x27;police&#x27;, &#x27;post_office&#x27;, &#x27;primary_school&#x27;, &#x27;real_estate_agency&#x27;, &#x27;restaurant&#x27;, &#x27;roofing_contractor&#x27;, &#x27;rv_park&#x27;, &#x27;school&#x27;, &#x27;secondary_school&#x27;, &#x27;shoe_store&#x27;, &#x27;shopping_mall&#x27;, &#x27;spa&#x27;, &#x27;stadium&#x27;, &#x27;storage&#x27;, &#x27;store&#x27;, &#x27;subway_station&#x27;, &#x27;supermarket&#x27;, &#x27;synagogue&#x27;, &#x27;taxi_stand&#x27;, &#x27;tourist_attraction&#x27;, &#x27;train_station&#x27;, &#x27;transit_station&#x27;, &#x27;travel_agency&#x27;, &#x27;university&#x27;, &#x27;veterinary_care&#x27;, &#x27;zoo&#x27;, &#x27;establishment&#x27;, &#x27;finance&#x27;, &#x27;general_contractor&#x27;, &#x27;food&#x27;, &#x27;health&#x27;, &#x27;place_of_worship&#x27;, &#x27;grocery_or_supermarket&#x27;, &#x27;colloquial_area&#x27;]"}, {"fullname": "gistools.place.Place", "modulename": "gistools.place", "qualname": "Place", "kind": "class", "doc": "<p>Represents a geographic point with latitude, longitude, and optional metadata.</p>\n\n<p>Attributes: <br />\n        - <code>id</code>(str, optional): Unique identifier for the point. <br />\n        - <code>external_id</code>(str, optional): External identifier for the point. <br />\n        - <code>name</code>(str, optional): Name of the point. <br />\n        - <code>description</code>(str, optional): Description of the point. <br />\n        - <code>longitude</code>(float): Longitude coordinate of the point. <br />\n        - <code>latitude</code>(float): Latitude coordinate of the point. <br />\n        - <code>plus_code</code>(str, optional): Plus Code representation of the point. <br />\n        - <code>code_length</code>(int): Length of the Plus Code to generate. Defaults to 10.  </p>\n\n<p>Methods: <br />\n        - <code>__init__</code>(data=None, code_length=10): Initializes a Point object. <br />\n        - <code>__repr__</code>(): Returns a string representation of the Point object. <br />\n        - <code>__getitem__</code>(key): Allows accessing attributes as dictionary keys. <br />\n        - <code>__setitem__</code>(key, value): Allows setting attributes as dictionary keys. <br />\n        - <code>__eq__</code>(other): Checks if two Point objects are equal based on their data. <br />\n        - <code>__ne__</code>(other): Checks if two Point objects are not equal based on their data. <br />\n        - <code>data</code>: Returns the data dictionary containing all attributes. <br />\n        - <code>id</code>: Returns the ID of the point. <br />\n        - <code>name</code>: Returns the name of the point. <br />\n        - <code>latitude</code>: Returns the latitude of the point. <br />\n        - <code>longitude</code>: Returns the longitude of the point. <br />\n        - <code>coordinates</code>: Returns a tuple of latitude and longitude coordinates. <br />\n        - <code>code_length</code>: Returns the length of the Plus Code. <br />\n        - <code>plus_code</code>: Returns the Plus Code representation of the point. <br />\n        - <code>copy()</code>: Returns a shallow copy of the Point object. <br />\n        - <code>deepcopy()</code>: Returns a deep copy of the Point object. <br />\n        - <code>distance</code>(other): Calculates the Haversine distance between this point and another. <br />\n        - <code>to_dict</code>(): Returns the data dictionary containing all attributes. <br />\n        - <code>to_json</code>(indent=4): Serializes the object to a JSON formatted string. <br />\n        - <code>to_WKT</code>(precision=6): Returns the Well-Known Text (WKT) representation of the point.</p>\n", "bases": "gistools.geometry.Point"}, {"fullname": "gistools.place.Place.__init__", "modulename": "gistools.place", "qualname": "Place.__init__", "kind": "function", "doc": "<p>Initializes a Point object.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>data (dict, optional)</strong>: Dictionary containing point data. Defaults to None.</li>\n<li><strong>code_length (int, optional)</strong>: Length of the Plus Code to generate. Defaults to 10.</li>\n</ul>\n\n<p>Raises:</p>\n\n<ul>\n<li><strong>TypeError</strong>: If data is not a dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">address</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">code_length</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">isbusiness</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "gistools.place.Place.data", "modulename": "gistools.place", "qualname": "Place.data", "kind": "variable", "doc": "<p>Returns the data dictionary containing all attributes.</p>\n"}, {"fullname": "gistools.place.Place.language", "modulename": "gistools.place", "qualname": "Place.language", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.components", "modulename": "gistools.place", "qualname": "Place.components", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.response", "modulename": "gistools.place", "qualname": "Place.response", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.set_thresholds", "modulename": "gistools.place", "qualname": "Place.set_thresholds", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.empty", "modulename": "gistools.place", "qualname": "Place.empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.check_query", "modulename": "gistools.place", "qualname": "Place.check_query", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.reverse_geocode", "modulename": "gistools.place", "qualname": "Place.reverse_geocode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.geocode", "modulename": "gistools.place", "qualname": "Place.geocode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.autocomplete", "modulename": "gistools.place", "qualname": "Place.autocomplete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.text_search", "modulename": "gistools.place", "qualname": "Place.text_search", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">business_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.find_place", "modulename": "gistools.place", "qualname": "Place.find_place", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.radar", "modulename": "gistools.place", "qualname": "Place.radar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">keyword</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">business_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.place_details", "modulename": "gistools.place", "qualname": "Place.place_details", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.compare_with", "modulename": "gistools.place", "qualname": "Place.compare_with", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">lcs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.check", "modulename": "gistools.place", "qualname": "Place.check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.is_better", "modulename": "gistools.place", "qualname": "Place.is_better", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.Place.threshold", "modulename": "gistools.place", "qualname": "Place.threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.threshold_on_name", "modulename": "gistools.place", "qualname": "Place.threshold_on_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.threshold_on_addr", "modulename": "gistools.place", "qualname": "Place.threshold_on_addr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.threshold_on_postal_code", "modulename": "gistools.place", "qualname": "Place.threshold_on_postal_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.threshold_on_city", "modulename": "gistools.place", "qualname": "Place.threshold_on_city", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.input_text", "modulename": "gistools.place", "qualname": "Place.input_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.formatted_address", "modulename": "gistools.place", "qualname": "Place.formatted_address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.street_number", "modulename": "gistools.place", "qualname": "Place.street_number", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.street", "modulename": "gistools.place", "qualname": "Place.street", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.city", "modulename": "gistools.place", "qualname": "Place.city", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.sub_locality", "modulename": "gistools.place", "qualname": "Place.sub_locality", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.postal_code", "modulename": "gistools.place", "qualname": "Place.postal_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.admin_area_level_2", "modulename": "gistools.place", "qualname": "Place.admin_area_level_2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.admin_area_level_1", "modulename": "gistools.place", "qualname": "Place.admin_area_level_1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.country", "modulename": "gistools.place", "qualname": "Place.country", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.country_code", "modulename": "gistools.place", "qualname": "Place.country_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.location_type", "modulename": "gistools.place", "qualname": "Place.location_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.location_accuracy", "modulename": "gistools.place", "qualname": "Place.location_accuracy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_id", "modulename": "gistools.place", "qualname": "Place.place_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_name", "modulename": "gistools.place", "qualname": "Place.place_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_type", "modulename": "gistools.place", "qualname": "Place.place_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_main_type", "modulename": "gistools.place", "qualname": "Place.place_main_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_brand", "modulename": "gistools.place", "qualname": "Place.place_brand", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.plus_code", "modulename": "gistools.place", "qualname": "Place.plus_code", "kind": "variable", "doc": "<p>Returns the Plus Code representation of the point.</p>\n"}, {"fullname": "gistools.place.Place.address", "modulename": "gistools.place", "qualname": "Place.address", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence", "modulename": "gistools.place", "qualname": "Place.confidence", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence_on_name", "modulename": "gistools.place", "qualname": "Place.confidence_on_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence_on_addr", "modulename": "gistools.place", "qualname": "Place.confidence_on_addr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence_on_postal_code", "modulename": "gistools.place", "qualname": "Place.confidence_on_postal_code", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence_on_city", "modulename": "gistools.place", "qualname": "Place.confidence_on_city", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.confidence_on_country", "modulename": "gistools.place", "qualname": "Place.confidence_on_country", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.accepted", "modulename": "gistools.place", "qualname": "Place.accepted", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.api_used", "modulename": "gistools.place", "qualname": "Place.api_used", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.maps_URL", "modulename": "gistools.place", "qualname": "Place.maps_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.place_URL", "modulename": "gistools.place", "qualname": "Place.place_URL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.website", "modulename": "gistools.place", "qualname": "Place.website", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.distance_haversine", "modulename": "gistools.place", "qualname": "Place.distance_haversine", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.place.Place.describe", "modulename": "gistools.place", "qualname": "Place.describe", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.geocode", "modulename": "gistools.place", "qualname": "geocode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">isbusiness</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gistools</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">Place</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.autocomplete", "modulename": "gistools.place", "qualname": "autocomplete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">isbusiness</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gistools</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">Place</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.text_search", "modulename": "gistools.place", "qualname": "text_search", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">business_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gistools</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">Place</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.find_place", "modulename": "gistools.place", "qualname": "find_place", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gistools</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">Place</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.radar", "modulename": "gistools.place", "qualname": "radar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">radius</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">keyword</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">business_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.place.place_details", "modulename": "gistools.place", "qualname": "place_details", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span>,</span><span class=\"param\">\t<span class=\"n\">components</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;country&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;france&#39;</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s1\">&#39;fr&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">stub</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gistools</span><span class=\"o\">.</span><span class=\"n\">place</span><span class=\"o\">.</span><span class=\"n\">Place</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code", "modulename": "gistools.plus_code", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.SEPARATOR_", "modulename": "gistools.plus_code", "qualname": "SEPARATOR_", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;+&#x27;"}, {"fullname": "gistools.plus_code.SEPARATOR_POSITION_", "modulename": "gistools.plus_code", "qualname": "SEPARATOR_POSITION_", "kind": "variable", "doc": "<p></p>\n", "default_value": "8"}, {"fullname": "gistools.plus_code.PADDING_CHARACTER_", "modulename": "gistools.plus_code", "qualname": "PADDING_CHARACTER_", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;0&#x27;"}, {"fullname": "gistools.plus_code.CODE_ALPHABET_", "modulename": "gistools.plus_code", "qualname": "CODE_ALPHABET_", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;23456789CFGHJMPQRVWX&#x27;"}, {"fullname": "gistools.plus_code.ENCODING_BASE_", "modulename": "gistools.plus_code", "qualname": "ENCODING_BASE_", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "gistools.plus_code.LATITUDE_MAX_", "modulename": "gistools.plus_code", "qualname": "LATITUDE_MAX_", "kind": "variable", "doc": "<p></p>\n", "default_value": "90"}, {"fullname": "gistools.plus_code.LONGITUDE_MAX_", "modulename": "gistools.plus_code", "qualname": "LONGITUDE_MAX_", "kind": "variable", "doc": "<p></p>\n", "default_value": "180"}, {"fullname": "gistools.plus_code.PAIR_CODE_LENGTH_", "modulename": "gistools.plus_code", "qualname": "PAIR_CODE_LENGTH_", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "gistools.plus_code.PAIR_RESOLUTIONS_", "modulename": "gistools.plus_code", "qualname": "PAIR_RESOLUTIONS_", "kind": "variable", "doc": "<p></p>\n", "default_value": "[20.0, 1.0, 0.05, 0.0025, 0.000125]"}, {"fullname": "gistools.plus_code.GRID_COLUMNS_", "modulename": "gistools.plus_code", "qualname": "GRID_COLUMNS_", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "gistools.plus_code.GRID_ROWS_", "modulename": "gistools.plus_code", "qualname": "GRID_ROWS_", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "gistools.plus_code.GRID_SIZE_DEGREES_", "modulename": "gistools.plus_code", "qualname": "GRID_SIZE_DEGREES_", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.000125"}, {"fullname": "gistools.plus_code.MIN_TRIMMABLE_CODE_LEN_", "modulename": "gistools.plus_code", "qualname": "MIN_TRIMMABLE_CODE_LEN_", "kind": "variable", "doc": "<p></p>\n", "default_value": "6"}, {"fullname": "gistools.plus_code.SP", "modulename": "gistools.plus_code", "qualname": "SP", "kind": "variable", "doc": "<p>Determines if a code is valid.\nTo be valid, all characters must be from the Open Location Code character\nset with at most one separator. The separator can be in any even-numbered\nposition up to the eighth digit.</p>\n", "default_value": "&#x27;+0&#x27;"}, {"fullname": "gistools.plus_code.isValid", "modulename": "gistools.plus_code", "qualname": "isValid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.isShort", "modulename": "gistools.plus_code", "qualname": "isShort", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.isFull", "modulename": "gistools.plus_code", "qualname": "isFull", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.encode", "modulename": "gistools.plus_code", "qualname": "encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span>, </span><span class=\"param\"><span class=\"n\">codeLength</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.decode", "modulename": "gistools.plus_code", "qualname": "decode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.recoverNearest", "modulename": "gistools.plus_code", "qualname": "recoverNearest", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span>, </span><span class=\"param\"><span class=\"n\">referenceLatitude</span>, </span><span class=\"param\"><span class=\"n\">referenceLongitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.shorten", "modulename": "gistools.plus_code", "qualname": "shorten", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span>, </span><span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.clipLatitude", "modulename": "gistools.plus_code", "qualname": "clipLatitude", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.computeLatitudePrecision", "modulename": "gistools.plus_code", "qualname": "computeLatitudePrecision", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">codeLength</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.normalizeLongitude", "modulename": "gistools.plus_code", "qualname": "normalizeLongitude", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">longitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.encodePairs", "modulename": "gistools.plus_code", "qualname": "encodePairs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span>, </span><span class=\"param\"><span class=\"n\">codeLength</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.encodeGrid", "modulename": "gistools.plus_code", "qualname": "encodeGrid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span>, </span><span class=\"param\"><span class=\"n\">codeLength</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.decodePairs", "modulename": "gistools.plus_code", "qualname": "decodePairs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.decodePairsSequence", "modulename": "gistools.plus_code", "qualname": "decodePairsSequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span>, </span><span class=\"param\"><span class=\"n\">offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.decodeGrid", "modulename": "gistools.plus_code", "qualname": "decodeGrid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.CodeArea", "modulename": "gistools.plus_code", "qualname": "CodeArea", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.__init__", "modulename": "gistools.plus_code", "qualname": "CodeArea.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">latitudeLo</span>, </span><span class=\"param\"><span class=\"n\">longitudeLo</span>, </span><span class=\"param\"><span class=\"n\">latitudeHi</span>, </span><span class=\"param\"><span class=\"n\">longitudeHi</span>, </span><span class=\"param\"><span class=\"n\">codeLength</span></span>)</span>"}, {"fullname": "gistools.plus_code.CodeArea.latitudeLo", "modulename": "gistools.plus_code", "qualname": "CodeArea.latitudeLo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.longitudeLo", "modulename": "gistools.plus_code", "qualname": "CodeArea.longitudeLo", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.latitudeHi", "modulename": "gistools.plus_code", "qualname": "CodeArea.latitudeHi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.longitudeHi", "modulename": "gistools.plus_code", "qualname": "CodeArea.longitudeHi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.codeLength", "modulename": "gistools.plus_code", "qualname": "CodeArea.codeLength", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.latitudeCenter", "modulename": "gistools.plus_code", "qualname": "CodeArea.latitudeCenter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.longitudeCenter", "modulename": "gistools.plus_code", "qualname": "CodeArea.longitudeCenter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "gistools.plus_code.CodeArea.latlng", "modulename": "gistools.plus_code", "qualname": "CodeArea.latlng", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.plus_code.main", "modulename": "gistools.plus_code", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings", "modulename": "gistools.strings", "kind": "module", "doc": "<p>This module provides a collection of functions for string manipulation, text cleaning, and similarity calculation.</p>\n\n<p><strong>String Manipulation:</strong></p>\n\n<ul>\n<li><code>is_string</code>: Checks if a value is a string.</li>\n<li><code>is_list_of_strings</code>: Checks if a list contains only strings.</li>\n<li><code>is_empty</code>: Checks if a string or list is empty.</li>\n<li><code>to_ascii</code>: Converts a string to ASCII.</li>\n<li><code>remove_redundant_whitespaces</code>: Removes redundant whitespaces from a string.</li>\n<li><code>replace_character</code>: Replaces special characters in a string.</li>\n<li><code>normalize</code>: Normalizes a string by removing keywords, replacing characters, and removing redundant whitespaces.</li>\n<li><code>clean</code>: Cleans a string by removing special characters, extra whitespaces, and converting to lowercase.</li>\n</ul>\n\n<p><strong>String Similarity:</strong></p>\n\n<ul>\n<li><code>longest_common_substring</code>: Finds the longest common substring between two strings.</li>\n<li><code>longest_common_subsequence</code>: Finds the longest common subsequence between two strings.</li>\n<li><code>most_frequent</code>: Finds the most frequent element in a list.</li>\n<li><code>longest_match</code>: Finds the longest common substring among a list of strings.</li>\n<li><code>levenshtein_distance</code>: Calculates the Levenshtein distance and ratio between two strings.</li>\n<li><code>remove_character</code>: Removes a specific character from a string.</li>\n<li><code>remove_keywords</code>: Removes keywords from a string.</li>\n<li><code>match</code>: Checks if two strings match using a specified metric.</li>\n<li><code>distance</code>: Calculates the distance between two strings using a specified metric.</li>\n<li><code>similarity</code>: Calculates the similarity between two strings using Levenshtein distance.</li>\n</ul>\n\n<p><strong>Other Functions:</strong></p>\n\n<ul>\n<li><code>str2list</code>: Converts a string to a list of strings.</li>\n<li><code>build_sequence</code>: Builds a sequence string from a record using specified keys.</li>\n<li><code>drop_duplicates</code>: Drops duplicate values from a record.</li>\n</ul>\n"}, {"fullname": "gistools.strings.is_string", "modulename": "gistools.strings", "qualname": "is_string", "kind": "function", "doc": "<p>Checks if the input value is a string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>val</strong>: The value to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong>: True if the input value is a string, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.is_list_of_strings", "modulename": "gistools.strings", "qualname": "is_list_of_strings", "kind": "function", "doc": "<p>Checks if the input list contains only strings.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong>: True if the input list contains only strings, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.is_empty", "modulename": "gistools.strings", "qualname": "is_empty", "kind": "function", "doc": "<p>Checks if the input string or list is empty.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string or list to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong>: True if the input string or list is empty, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.to_ascii", "modulename": "gistools.strings", "qualname": "to_ascii", "kind": "function", "doc": "<p>Converts a string to ASCII.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string to convert.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The ASCII representation of the string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.remove_redundant_whitespaces", "modulename": "gistools.strings", "qualname": "remove_redundant_whitespaces", "kind": "function", "doc": "<p>Removes redundant whitespaces from a string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string to clean.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The cleaned string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.replace_character", "modulename": "gistools.strings", "qualname": "replace_character", "kind": "function", "doc": "<p>Replaces special characters in a string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string to replace characters in.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The string with replaced characters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.normalize", "modulename": "gistools.strings", "qualname": "normalize", "kind": "function", "doc": "<p>Normalizes a string by removing keywords, replacing characters, and removing redundant whitespaces.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>string</strong>: The string to normalize.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The normalized string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.clean", "modulename": "gistools.strings", "qualname": "clean", "kind": "function", "doc": "<p>Cleans a string by removing special characters, extra whitespaces, and converting to lowercase.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>string</strong>: The string to clean.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The cleaned string, or None if the string is empty or missing.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.longest_common_substring", "modulename": "gistools.strings", "qualname": "longest_common_substring", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">s2</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.longest_common_subsequence", "modulename": "gistools.strings", "qualname": "longest_common_subsequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.most_frequent", "modulename": "gistools.strings", "qualname": "most_frequent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.longest_match", "modulename": "gistools.strings", "qualname": "longest_match", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.levenshtein_distance", "modulename": "gistools.strings", "qualname": "levenshtein_distance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">token1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">token2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.remove_character", "modulename": "gistools.strings", "qualname": "remove_character", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">character</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.remove_keywords", "modulename": "gistools.strings", "qualname": "remove_keywords", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_text</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">to_lower</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">keywords</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;cedex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Cedex&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;CEDEX&#39;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.match", "modulename": "gistools.strings", "qualname": "match", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">s2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;jellyfish.match-rating&#39;</span>, </span><span class=\"param\"><span class=\"n\">lcs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.distance", "modulename": "gistools.strings", "qualname": "distance", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">s2</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;jellyfish.jaro-winkler&#39;</span>, </span><span class=\"param\"><span class=\"n\">lcs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.similarity", "modulename": "gistools.strings", "qualname": "similarity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">str_left</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">str_right</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">lcs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.str2list", "modulename": "gistools.strings", "qualname": "str2list", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39; &#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.build_sequence", "modulename": "gistools.strings", "qualname": "build_sequence", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">keys</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.strings.drop_duplicates", "modulename": "gistools.strings", "qualname": "drop_duplicates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils", "modulename": "gistools.utils", "kind": "module", "doc": "<p>Collection of utility functions for working with data in Python.</p>\n\n<p>This module provides a comprehensive set of functions for common data handling tasks in Python, including:</p>\n\n<ul>\n<li>Type checking for various data structures (lists, dictionaries, DataFrames, GeoDataFrames).</li>\n<li>Data manipulation functions (e.g., removing duplicates, adding values to lists, merging dictionaries, etc.).</li>\n<li>File handling functions (reading and writing CSV, JSON, and pickle files).</li>\n<li>Path manipulation functions (joining path components, creating directories).</li>\n<li>Date/Time functions for converting between different formats.</li>\n<li>Numeric functions for checking numeric types, converting to integers, and formatting float values.</li>\n<li>System utility functions for checking method existence and retrieving class information.</li>\n</ul>\n\n<p>The module aims to be user-friendly and concise, offering convenient solutions for common data operations.</p>\n\n<p><strong>System utilities</strong></p>\n\n<ul>\n<li><code>has_method</code>: Checks if an object has a specific method. </li>\n<li><code>get_class_name</code>: Retrieves the class name of the given object.</li>\n<li><code>get_class_attr</code>: Retrieves public attributes of a given class.</li>\n</ul>\n\n<p><strong>Date/Time</strong></p>\n\n<ul>\n<li><code>isoformat_as_datetime</code>: Converts an ISO 8601 formatted string to a datetime object.</li>\n<li><code>str2datetime</code>: Converts a string representing a date and time to a datetime object.</li>\n<li><code>datetime2str</code>: Converts a datetime object to a string representation.</li>\n<li><code>str2localdatetime</code>: Converts a string representing a UTC datetime to a local datetime object.</li>\n<li><code>str2timestamp</code>: Converts a string representing a date and time to a Unix timestamp.</li>\n<li><code>utc_to_local</code>: Converts a UTC datetime object to a local datetime object.</li>\n<li><code>str2localtimestamp</code>: Converts a UTC datetime string to a local timestamp (integer seconds since epoch).</li>\n<li><code>str2localdatetime</code>: Converts a UTC datetime string to a local datetime object.</li>\n<li><code>timestamp2str</code>: Converts a Unix timestamp (integer seconds since epoch) to a string representation.</li>\n<li><code>timestr2seconds</code>: Converts a time string in HH:MM:SS format to seconds.</li>\n<li><code>timestr2minutes</code>: Converts a time string in MM:SS format to minutes.</li>\n<li><code>seconds2timestr</code>: Converts a duration in seconds to a time string in the specified format.</li>\n<li><code>to_timestr</code>: Converts a duration in seconds to a time string in HH:MM:SS format.</li>\n<li><code>total_seconds</code>: Calculates the total number of seconds between two datetime strings.</li>\n<li><code>format_datetime</code>: Converts a datetime string from one format to another.</li>\n<li><code>is_date</code>: Checks if a string represents a valid date in the specified format.</li>\n<li><code>is_time</code>: Checks if a string represents a valid time in the specified format.</li>\n<li><code>isocalendar</code>: Returns the ISO calendar tuple (year, week number, weekday) for a given date string.</li>\n<li><code>weekday</code>: Returns the weekday (1-7) for a given date string, where 1 is Monday and 7 is Sunday.</li>\n<li><code>weekday_name</code>: Returns the full name of the weekday for a given date string.</li>\n</ul>\n\n<p><strong>Numeric</strong></p>\n\n<ul>\n<li><code>isnan</code>: Checks if a number is NaN (Not a Number). </li>\n<li><code>is_numeric</code>: Checks if a given string represents a numeric value.</li>\n<li><code>is_integer</code>: Checks if a number is an integer.</li>\n<li><code>is_numeric_and_integer</code>: Checks if a given argument is both numeric and an integer.</li>\n<li><code>is_float</code>: Checks if a number is a float (floating-point number).</li>\n<li><code>is_number_regex</code>: Checks if a string represents a numeric value using regular expressions.</li>\n<li><code>is_number_repl_isdigit</code>: Checks if a string represents a numeric value using string manipulation.</li>\n<li><code>to_int</code>: Attempts to convert a given element to an integer. </li>\n<li><code>format_float</code>: Formats a float value to remove trailing zeros and the decimal point if unnecessary.</li>\n</ul>\n\n<p><strong>Lists</strong></p>\n\n<ul>\n<li><code>is_list</code>: Checks if an object is a list-like structure.</li>\n<li><code>is_array</code>: Checks if an object is array-like (has a length attribute).</li>\n<li><code>is_in_collection</code>: Checks if an element is present in a collection.</li>\n<li><code>remove_none</code>: Removes None values from a list.</li>\n<li><code>intersection</code>: Calculates the intersection of two lists.</li>\n<li><code>itemgetter</code>: Gets a specific item from each element in a list of dictionaries.</li>\n<li><code>is_in_list</code>: Checks if all elements in a list are present in another list or pattern.</li>\n<li><code>is_in_list_of_dict</code>: Checks if a specific value exists for a given key within a list of dictionaries.</li>\n<li><code>drop_duplicates</code>: Removes duplicate elements from a list while preserving order.</li>\n<li><code>subfinder</code>: Finds elements in a list that are present in another list or pattern.</li>\n<li><code>split_listoftuples</code>: Splits a list of tuples into separate lists based on their elements.</li>\n<li><code>find_duplicates</code>: Finds duplicate elements in a list.</li>\n<li><code>add_to</code>: Adds a value to each element in a list.</li>\n</ul>\n\n<p><strong>Dictionnaries</strong></p>\n\n<ul>\n<li><code>merge_dicts</code>: Merges two dictionaries, giving preference to values from dict2 in case of key conflicts.</li>\n<li><code>none_dict</code>: Creates a dictionary with None values for each key in a given list.</li>\n<li><code>is_empty</code>: Checks if a dictionary is empty, optionally considering only specific keys.</li>\n<li><code>is_set</code>: Checks if a key exists in a dictionary.</li>\n<li><code>is_set_toint</code>: Checks if a key exists in a dictionary and its value is an integer.</li>\n<li><code>is_set_tofloat</code>: Checks if a key exists in a dictionary and its value is a float.</li>\n<li><code>is_set_tostr</code>: Checks if a key exists in a dictionary and its value is a string.</li>\n</ul>\n\n<p><strong>Dataframes</strong></p>\n\n<ul>\n<li><code>is_dataframe</code>: Checks if an object is a Pandas DataFrame or a GeoDataFrame.</li>\n<li><code>get_columns</code>: Gets a list of column names from a Pandas DataFrame.</li>\n<li><code>from_dict</code>: Creates a Pandas DataFrame from a dictionary, optionally specifying column order.</li>\n<li><code>where</code>: Applies filtering conditions to a Pandas DataFrame based on a given expression.</li>\n<li><code>isin</code>: Filters a DataFrame to keep rows where the specified column's value is in the given list.</li>\n<li><code>not_isin</code>: Filters a DataFrame to keep rows where the specified column's value is not in the given list.</li>\n<li><code>join</code>: Performs a merge operation between two DataFrames.</li>\n<li><code>to_geo</code>: Converts a Pandas DataFrame to a GeoDataFrame.</li>\n<li><code>select</code>: Applies a mapping from an enumeration to a list, NumPy array, or Pandas DataFrame column.</li>\n</ul>\n\n<p><strong>I/O</strong></p>\n\n<ul>\n<li><code>ospathextension</code>: Gets the file extension from a filename.</li>\n<li><code>ospathfilename</code>: Gets the filename (without the extension) from a filepath.</li>\n<li><code>ospathjoin</code>: Joins a pathname and filename, handling potential None values.</li>\n<li><code>make_directory</code>: Creates a directory if it doesn't exist, optionally within a parent directory.</li>\n<li><code>is_tsp_file</code>: Checks if a filename represents a TSP file.</li>\n<li><code>is_vrp_file</code>: Checks if a filename represents a VRP file.</li>\n<li><code>is_csv_file</code>: Checks if a filename represents a CSV file.</li>\n<li><code>is_json</code>: Checks if a filename represents a JSON file.</li>\n<li><code>read_dataframe</code>: Reads a CSV file into a Pandas DataFrame.</li>\n<li><code>to_dataframe</code>: Saves a Pandas DataFrame to a CSV file.</li>\n<li><code>read_pickle</code>: Reads a pickled object from a file, handling DataFrames and general objects.</li>\n<li><code>to_pickle</code>: Saves an object to a pickle file, handling DataFrames and general objects.</li>\n<li><code>read_json</code>: Reads a JSON file into a dictionary.</li>\n<li><code>to_json</code>: Saves a dictionary to a JSON file.</li>\n<li><code>read_csv</code>: Reads a CSV file into a list of dictionaries.</li>\n<li><code>to_csv</code>: Saves data to a CSV file, handling lists of dictionaries, DataFrames, and GeoDataFrames.</li>\n</ul>\n"}, {"fullname": "gistools.utils.has_method", "modulename": "gistools.utils", "qualname": "has_method", "kind": "function", "doc": "<p>Checks if an object has a callable method with the given name.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>arg</strong>: The object to check for the method.</li>\n<li><strong>method</strong>: The name of the method to look for.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong>: True if the object has a method with the given name that is also callable (a function), False otherwise.</li>\n</ul>\n\n<p>This function uses two checks:</p>\n\n<ul>\n<li>hasattr(arg, method): Checks if the object has an attribute with the given method name.</li>\n<li>callable(getattr(arg, method): Checks if the retrieved attribute is actually callable, meaning it's a function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.get_class_name", "modulename": "gistools.utils", "qualname": "get_class_name", "kind": "function", "doc": "<p>Retrieves the class name of the given object.</p>\n\n<p>This function takes an object of any type as input and returns the name\nof the class to which it belongs. This can be useful for introspection\nor debugging purposes, where you might need to determine the type\nof an object at runtime.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>obj (object)</strong>: The object whose class name you want to obtain.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>str</strong>: The name of the class to which the object belongs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.get_class_attr", "modulename": "gistools.utils", "qualname": "get_class_attr", "kind": "function", "doc": "<p>Retrieves public attributes of a given class.</p>\n\n<p>This function takes the name of a class (<code>classname</code>) as input and returns\na list of its public attributes (excluding methods and dunder methods).\nIt uses <code>inspect.getmembers</code> to introspect the class and filters out\nmethods using <code>inspect.isroutine</code> and dunder methods (those starting and\nending with double underscores) using list comprehension.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>classname (str)</strong>: The name of the class to introspect.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>list</strong>: A list of public attributes (strings) of the class.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">classname</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.isoformat_as_datetime", "modulename": "gistools.utils", "qualname": "isoformat_as_datetime", "kind": "function", "doc": "<p>Converts an ISO 8601 formatted string to a datetime object.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The ISO 8601 formatted string to convert.  </li>\n<li><strong>format_string</strong>: The format string to use for parsing. Defaults to '%Y-%m-%dT%H:%M:%SZ'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>datetime</strong> object representing the parsed date and time.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%SZ&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.str2datetime", "modulename": "gistools.utils", "qualname": "str2datetime", "kind": "function", "doc": "<p>Converts a string representing a date and time to a datetime object.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string representing the date and time.</li>\n<li><strong>format_string</strong>: The format string to use for parsing. Defaults to '%d/%m/%Y %H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>datetime</strong> object representing the parsed date and time.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.datetime2str", "modulename": "gistools.utils", "qualname": "datetime2str", "kind": "function", "doc": "<p>Converts a datetime object to a string representation.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>d</strong>: The datetime object to convert.</li>\n<li><strong>format_string</strong>: The format string to use for the conversion. Defaults to '%d/%m/%Y %H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representation of the datetime object in the specified format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.str2localdatetime", "modulename": "gistools.utils", "qualname": "str2localdatetime", "kind": "function", "doc": "<p>Converts a UTC datetime string to a local datetime object.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string representing the UTC datetime.</li>\n<li><strong>format_string</strong>: The format string to use for parsing. Defaults to '%Y-%m-%dT%H:%M:%S.000Z'.</li>\n<li><strong>timezone</strong>: The timezone to convert to. Defaults to 'Europe/Paris'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>local datetime</strong> object representing the parsed date and time in the specified timezone.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%S.000Z&#39;</span>, </span><span class=\"param\"><span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s1\">&#39;Europe/Paris&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.str2timestamp", "modulename": "gistools.utils", "qualname": "str2timestamp", "kind": "function", "doc": "<p>Converts a string representing a date and time to a Unix timestamp (integer seconds since epoch).</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string representing the date and time.</li>\n<li><strong>format_string</strong>: The format string to use for parsing. Defaults to '%d/%m/%Y %H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>integer</strong> representing the Unix timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.utc_to_local", "modulename": "gistools.utils", "qualname": "utc_to_local", "kind": "function", "doc": "<p>Converts a UTC datetime object to a local datetime object.</p>\n\n<p>Args:\n        utc_dt: The UTC datetime object to convert.</p>\n\n<p>Returns:\n        A local datetime object representing the same date and time in the local timezone.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">utc_dt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.str2localtimestamp", "modulename": "gistools.utils", "qualname": "str2localtimestamp", "kind": "function", "doc": "<p>Converts a UTC datetime string to a local timestamp (integer seconds since epoch).</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string representing the UTC datetime.</li>\n<li><strong>format_string</strong>: The format string to use for parsing. Defaults to '%Y-%m-%dT%H:%M:%S.%fZ'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>integer</strong> representing the local timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%S.</span><span class=\"si\">%f</span><span class=\"s1\">Z&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.timestamp2str", "modulename": "gistools.utils", "qualname": "timestamp2str", "kind": "function", "doc": "<p>Converts a Unix timestamp (integer seconds since epoch) to a string representation.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>t</strong>: The Unix timestamp (integer).</li>\n<li><strong>format_string</strong>: The format string to use for the conversion. Defaults to '%d/%m/%Y %H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representation of the timestamp in the specified format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.timestr2seconds", "modulename": "gistools.utils", "qualname": "timestr2seconds", "kind": "function", "doc": "<p>Converts a time string in HH:MM:SS format to seconds.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>timestr</strong>: The time string in HH:MM:SS format.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>integer</strong> representing the time in seconds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.timestr2minutes", "modulename": "gistools.utils", "qualname": "timestr2minutes", "kind": "function", "doc": "<p>Converts a time string in MM:SS format to minutes.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>timestr</strong>: The time string in MM:SS format.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><em>* integer</em>* representing the time in minutes.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timestr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.seconds2timestr", "modulename": "gistools.utils", "qualname": "seconds2timestr", "kind": "function", "doc": "<p>Converts a duration in seconds to a time string in the specified format.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>duration</strong>: The duration in seconds.</li>\n<li><strong>format_string</strong>: The format string to use for the conversion. Defaults to '%H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representing the duration in the specified format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;%H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_timestr", "modulename": "gistools.utils", "qualname": "to_timestr", "kind": "function", "doc": "<p>Converts a duration in seconds to a time string in HH:MM:SS format.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>seconds</strong>: The duration in seconds.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representing the duration in HH:MM:SS format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.total_seconds", "modulename": "gistools.utils", "qualname": "total_seconds", "kind": "function", "doc": "<p>Calculates the total number of seconds between two datetime strings.</p>\n\n<p>Args:\n        start: The starting datetime string.\n        end: The ending datetime string.\n        format_string: The format string to use for parsing the datetime strings. Defaults to '%d/%m/%Y %H:%M:%S'.</p>\n\n<p>Returns:\n        The total number of seconds between the two datetime strings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">end</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.format_datetime", "modulename": "gistools.utils", "qualname": "format_datetime", "kind": "function", "doc": "<p>Converts a datetime string from one format to another.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The datetime string to convert.</li>\n<li><strong>format_from</strong>: The format string of the input datetime string. Defaults to '%d/%m/%Y %H:%M:%S'.</li>\n<li><strong>format_to</strong>: The format string of the output datetime string. Defaults to '%Y-%m-%dT%H:%M:%SZ'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representing the datetime in the specified output format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_from</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span>, </span><span class=\"param\"><span class=\"n\">format_to</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%SZ&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_date", "modulename": "gistools.utils", "qualname": "is_date", "kind": "function", "doc": "<p>Checks if a string represents a valid date in the specified format.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>d</strong>: The string to check.</li>\n<li><strong>format_string</strong>: The format string to use for parsing the date. Defaults to '%d/%m/%Y'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the string represents a valid date, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_time", "modulename": "gistools.utils", "qualname": "is_time", "kind": "function", "doc": "<p>Checks if a string represents a valid time in the specified format.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>t</strong>: The string to check.</li>\n<li><strong>format_string</strong>: The format string to use for parsing the time. Defaults to '%H:%M:%S'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the string represents a valid time, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;%H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.isocalendar", "modulename": "gistools.utils", "qualname": "isocalendar", "kind": "function", "doc": "<p>Returns the ISO calendar tuple (ISO year, ISO week number, ISO weekday) for a given date string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The date string to convert.</li>\n<li><strong>format_string</strong>: The format string to use for parsing the date. Defaults to '%d/%m/%Y'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>tuple</strong> containing (ISO year, ISO week number, ISO weekday).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.weekday", "modulename": "gistools.utils", "qualname": "weekday", "kind": "function", "doc": "<p>Returns the weekday (1-7) for a given date string, where 1 is Monday and 7 is Sunday.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The date string to convert.</li>\n<li><strong>format_string</strong>: The format string to use for parsing the date. Defaults to '%d/%m/%Y'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>integer</strong> representing the weekday (1-7).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.weekday_name", "modulename": "gistools.utils", "qualname": "weekday_name", "kind": "function", "doc": "<p>Returns the full name of the weekday for a given date string.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The date string to convert.</li>\n<li><strong>format_string</strong>: The format string to use for parsing the date. Defaults to '%d/%m/%Y'.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representing the full name of the weekday (e.g., \"Monday\", \"Tuesday\", ...).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">format_string</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.isnan", "modulename": "gistools.utils", "qualname": "isnan", "kind": "function", "doc": "<p>Checks if a number is NaN (Not a Number). </p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>number</strong>: The number to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the number is NaN, False otherwise.</li>\n</ul>\n\n<p>Important Note: <br />\nWhile this approach works for checking NaN in Python, it's worth noting that \nmath.isnan is a dedicated function provided by the math module for this purpose. \nIt's recommended to use math.isnan for more explicit and robust NaN checks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_numeric", "modulename": "gistools.utils", "qualname": "is_numeric", "kind": "function", "doc": "<p>Checks if a given string represents a numeric value.\nCredit: <a href=\"http://www.rosettacode.org/wiki/Determine_if_a_string_is_numeric#Python\">Rosetta Code</a></p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>literal</strong>: The string to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the string represents a numeric value, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">literal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_integer", "modulename": "gistools.utils", "qualname": "is_integer", "kind": "function", "doc": "<p>Checks if a number is an integer.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>number</strong>: The number to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the number is an integer, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_numeric_and_integer", "modulename": "gistools.utils", "qualname": "is_numeric_and_integer", "kind": "function", "doc": "<p>Checks if a given argument is both numeric and an integer.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>arg</strong>: The argument to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the argument is both numeric and an integer, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_float", "modulename": "gistools.utils", "qualname": "is_float", "kind": "function", "doc": "<p>Checks if a number is a float (floating-point number).</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>number</strong>: The number to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the number is a float, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_number_regex", "modulename": "gistools.utils", "qualname": "is_number_regex", "kind": "function", "doc": "<p>Checks if a string represents a numeric value using regular expressions.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the string represents a numeric value, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_number_repl_isdigit", "modulename": "gistools.utils", "qualname": "is_number_repl_isdigit", "kind": "function", "doc": "<p>Checks if a string represents a numeric value using string manipulation.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>s</strong>: The string to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the string represents a numeric value, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_int", "modulename": "gistools.utils", "qualname": "to_int", "kind": "function", "doc": "<p>Attempts to convert a given element to an integer. </p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>element</strong>: The element to convert.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>integer</strong> representing the element if successful, otherwise NaN.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">element</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.format_float", "modulename": "gistools.utils", "qualname": "format_float", "kind": "function", "doc": "<p>Formats a float value to remove trailing zeros and the decimal point if unnecessary,\nallowing for customization of the number of decimal places.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>arg</strong>: The float value to format.</li>\n<li><strong>decimals</strong>: The number of decimal places to display. Defaults to 2.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>string</strong> representation of the float.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_list", "modulename": "gistools.utils", "qualname": "is_list", "kind": "function", "doc": "<p>Checks if an object is a list-like structure. <br />\nCredit: <a href=\"https://github.com/googlemaps/google-maps-services-python/blob/master/googlemaps/convert.py\">Python client for Google Maps Platform Services</a></p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>arg</strong>: The object to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the object is a list-like structure, False otherwise.</li>\n</ul>\n\n<p>Notes: <br />\nThis function checks for both <code>__getitem__</code> (for indexing) and <code>__iter__</code> (for iteration) to cover various list-like objects, \nincluding custom classes. It excludes dictionaries (<code>dict</code>) and strings (<code>str</code>).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_array", "modulename": "gistools.utils", "qualname": "is_array", "kind": "function", "doc": "<p>Checks if an object is array-like (has a length attribute).</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>a</strong>: The object to check.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the object is array-like, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_in_collection", "modulename": "gistools.utils", "qualname": "is_in_collection", "kind": "function", "doc": "<p>Checks if an element is present in a collection.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>element</strong>: The element to search for.</li>\n<li><strong>collection</strong>: An iterable object (list, tuple, set, etc.) to search in.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the element is found in the collection, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">element</span>, </span><span class=\"param\"><span class=\"n\">collection</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">iter</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.remove_none", "modulename": "gistools.utils", "qualname": "remove_none", "kind": "function", "doc": "<p>Removes None values from a list.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to remove None values from.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> with all None values removed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.intersection", "modulename": "gistools.utils", "qualname": "intersection", "kind": "function", "doc": "<p>Returns the intersection of two lists (elements present in both lists).</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>list1_</strong>: The first list.</li>\n<li><strong>list2_</strong>: The second list.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> containing the elements present in both input lists.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">list1_</span>, </span><span class=\"param\"><span class=\"n\">list2_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.itemgetter", "modulename": "gistools.utils", "qualname": "itemgetter", "kind": "function", "doc": "<p>Gets a specific item from each element in a list of dictionaries.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list of dictionaries.</li>\n<li><strong>key</strong>: The key to extract from each dictionary.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> containing the values for the specified key from each dictionary.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_in_list", "modulename": "gistools.utils", "qualname": "is_in_list", "kind": "function", "doc": "<p>Checks if all elements in a list are present in another list or pattern.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to check.</li>\n<li><strong>pattern</strong>: The list or pattern to check against.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if all elements in <code>l</code> are found in <code>pattern</code>, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">pattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_in_list_of_dict", "modulename": "gistools.utils", "qualname": "is_in_list_of_dict", "kind": "function", "doc": "<p>Checks if a specific value exists for a given key in any dictionary within a list of dictionaries.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list of dictionaries.</li>\n<li><strong>key</strong>: The key to search for.</li>\n<li><strong>value</strong>: The value to search for.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><strong>boolean</strong> = True if the value is found for the specified key in any dictionary, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.drop_duplicates", "modulename": "gistools.utils", "qualname": "drop_duplicates", "kind": "function", "doc": "<p>Removes duplicate elements from a list while preserving order.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to remove duplicates from.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> with duplicate elements removed, preserving the order of the remaining elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.subfinder", "modulename": "gistools.utils", "qualname": "subfinder", "kind": "function", "doc": "<p>Finds elements in a list that are present in another list or pattern.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to search in.</li>\n<li><strong>pattern</strong>: The list or pattern to match against.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> containing elements from <code>l</code> that are also present in <code>pattern</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">pattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.split_listoftuples", "modulename": "gistools.utils", "qualname": "split_listoftuples", "kind": "function", "doc": "<p>Splits a list of tuples into separate lists based on their elements.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list of tuples to split.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> containing separate lists for each element in the original tuples.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.find_duplicates", "modulename": "gistools.utils", "qualname": "find_duplicates", "kind": "function", "doc": "<p>Finds duplicate elements in a list.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to search for duplicates.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> containing only the duplicate elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.add_to", "modulename": "gistools.utils", "qualname": "add_to", "kind": "function", "doc": "<p>Adds a value to each element in a list.</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>l</strong>: The list to modify.</li>\n<li><strong>value</strong>: The value to add to each element.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A new <strong>list</strong> with the value added to each element.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span>, </span><span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.merge_dicts", "modulename": "gistools.utils", "qualname": "merge_dicts", "kind": "function", "doc": "<p>Merges two dictionaries, giving preference to values from dict2 in case of key conflicts.</p>\n\n<p>Args:\n        dict1: The first dictionary.\n        dict2: The second dictionary.</p>\n\n<p>Returns:\n        A new dictionary containing all key-value pairs from both input dictionaries,\n        with values from dict2 taking precedence in case of overlapping keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dict1</span>, </span><span class=\"param\"><span class=\"n\">dict2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.none_dict", "modulename": "gistools.utils", "qualname": "none_dict", "kind": "function", "doc": "<p>Creates a dictionary with None values for each key in a given list.</p>\n\n<p>Args:\n        from_list: The list of keys for the dictionary.</p>\n\n<p>Returns:\n        A dictionary with None values for each key in the input list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">from_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_empty", "modulename": "gistools.utils", "qualname": "is_empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_set", "modulename": "gistools.utils", "qualname": "is_set", "kind": "function", "doc": "<p>Checks if a dictionary is empty, optionally considering only specific keys.</p>\n\n<p>Args:\n        d: The dictionary to check.\n        usecols: A list of keys to consider for emptiness. If None, checks all keys. Defaults to None.</p>\n\n<p>Returns:\n        True if the dictionary is empty or all specified keys have empty values, False otherwise.</p>\n\n<p>Raises:\n        TypeError: If 'usecols' is not a list of strings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_set_toint", "modulename": "gistools.utils", "qualname": "is_set_toint", "kind": "function", "doc": "<p>Checks if a key exists in a dictionary and its value is an integer.</p>\n\n<p>Args:\n        record: The dictionary to check.\n        key: The key to check for.</p>\n\n<p>Returns:\n        True if the key exists and its value is an integer, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_set_tofloat", "modulename": "gistools.utils", "qualname": "is_set_tofloat", "kind": "function", "doc": "<p>Checks if a key exists in a dictionary and its value is a float.</p>\n\n<p>Args:\n        record: The dictionary to check.\n        key: The key to check for.</p>\n\n<p>Returns:\n        True if the key exists and its value is a float, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_set_tostr", "modulename": "gistools.utils", "qualname": "is_set_tostr", "kind": "function", "doc": "<p>Checks if a key exists in a dictionary and its value is a string.</p>\n\n<p>Args:\n        record: The dictionary to check.\n        key: The key to check for.</p>\n\n<p>Returns:\n        True if the key exists and its value is a string, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_dataframe", "modulename": "gistools.utils", "qualname": "is_dataframe", "kind": "function", "doc": "<p>Checks if an object is a Pandas DataFrame or a GeoDataFrame.</p>\n\n<p>Args:\n        records: The object to check.</p>\n\n<p>Returns:\n        True if the object is a Pandas DataFrame or a GeoDataFrame, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">records</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.get_columns", "modulename": "gistools.utils", "qualname": "get_columns", "kind": "function", "doc": "<p>Gets a list of column names from a Pandas DataFrame.</p>\n\n<p>Args:\n        df: The Pandas DataFrame.\n        empty: If True, returns only column names that have at least one missing value (NaN).\n        If False, returns all column names. Defaults to False.</p>\n\n<p>Returns:\n        A list of column names.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">empty</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.from_dict", "modulename": "gistools.utils", "qualname": "from_dict", "kind": "function", "doc": "<p>Creates a Pandas DataFrame from a dictionary, optionally specifying column order.</p>\n\n<p>Args:\n        d: The dictionary to convert to a DataFrame.\n        columns: A list of column names to specify the order of columns in the DataFrame.\n        If None, columns are ordered alphabetically. Defaults to None.</p>\n\n<p>Returns:\n        A Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.where", "modulename": "gistools.utils", "qualname": "where", "kind": "function", "doc": "<p>Applies filtering conditions to a Pandas DataFrame based on a given expression.</p>\n\n<p>Args:\n        df: The Pandas DataFrame to filter.\n        expr: A tuple, list of tuples, or a single tuple defining the filtering criteria.\n        - Single Tuple: (column_name, operator, value)\n        - List of Tuples: [(column_name, operator, value), ...]\n        - Tuple of Tuples: ((column_name, operator, value), ...) </p>\n\n<p>Returns:\n        A new DataFrame filtered based on the provided expression.</p>\n\n<p>Supported Operators:\n        - '==', '!=', '>', '&lt;', '>=', '&lt;='\n        - 'isin' (for membership in a list)\n        - '~isin' (for negation of membership in a list)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">expr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.isin", "modulename": "gistools.utils", "qualname": "isin", "kind": "function", "doc": "<p>Filters a DataFrame to keep rows where the specified column's value is in the given list.</p>\n\n<p>Args:\n        df: The DataFrame to filter.\n        key: The name of the column to check.\n        values: The list of values to check against. If a string is provided, it's treated as a single value.</p>\n\n<p>Returns:\n        A new DataFrame containing only the rows where the column value is in the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.not_isin", "modulename": "gistools.utils", "qualname": "not_isin", "kind": "function", "doc": "<p>Filters a DataFrame to keep rows where the specified column's value is NOT in the given list.</p>\n\n<p>Args:\n        df: The DataFrame to filter.\n        key: The name of the column to check.\n        values: The list of values to check against. If a string is provided, it's treated as a single value.</p>\n\n<p>Returns:\n        A new DataFrame containing only the rows where the column value is NOT in the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.join", "modulename": "gistools.utils", "qualname": "join", "kind": "function", "doc": "<p>Performs a merge operation between two DataFrames.</p>\n\n<p>Args:\n        left: The left DataFrame.\n        right: The right DataFrame.\n        left_on: The column name in the left DataFrame to use for merging.\n        right_on: The column name in the right DataFrame to use for merging.\n        how: The type of merge to perform ('left', 'right', 'inner', 'outer'). Defaults to 'left'.\n        output: The name of the column to extract from the merged DataFrame. If None, returns the entire merged DataFrame. Defaults to None.</p>\n\n<p>Returns:\n        A new DataFrame or a list containing the specified column from the merged DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">left</span>, </span><span class=\"param\"><span class=\"n\">right</span>, </span><span class=\"param\"><span class=\"n\">left_on</span>, </span><span class=\"param\"><span class=\"n\">right_on</span>, </span><span class=\"param\"><span class=\"n\">how</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>, </span><span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_geo", "modulename": "gistools.utils", "qualname": "to_geo", "kind": "function", "doc": "<p>Converts a Pandas DataFrame to a GeoDataFrame with points based on longitude and latitude columns.</p>\n\n<p>Args:\n        data: The Pandas DataFrame to convert.\n        from_: A tuple containing the column names for longitude and latitude, respectively. Defaults to ('longitude', 'latitude').\n        epsg: The EPSG code for the desired coordinate reference system (CRS). Defaults to 4326 (WGS84).</p>\n\n<p>Returns:\n        A GeoDataFrame with a 'geometry' column containing points based on the specified columns.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">from_</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;longitude&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;latitude&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">epsg</span><span class=\"o\">=</span><span class=\"mi\">4326</span></span><span class=\"return-annotation\">) -> <span class=\"n\">geopandas</span><span class=\"o\">.</span><span class=\"n\">geodataframe</span><span class=\"o\">.</span><span class=\"n\">GeoDataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.select", "modulename": "gistools.utils", "qualname": "select", "kind": "function", "doc": "<p>Applies a mapping from an enumeration to a list, NumPy array, or Pandas DataFrame column.</p>\n\n<p>Args:\n        data: The list, NumPy array, or Pandas DataFrame to apply the mapping to.\n        enum: A dictionary representing the mapping from keys to values.\n        on: The name of the column in the DataFrame to apply the mapping to. Required if 'data' is a DataFrame.</p>\n\n<p>Returns:\n        A NumPy array with the mapped values.</p>\n\n<p>Raises:\n        ValueError: If 'data' is not a valid type or if 'on' is not a valid column in the DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">enum</span>, </span><span class=\"param\"><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.ospathextension", "modulename": "gistools.utils", "qualname": "ospathextension", "kind": "function", "doc": "<p>Gets the file extension from a filename using the os.path.splitext function.</p>\n\n<p>Args:\n        filename: The filename to extract the extension from.</p>\n\n<p>Returns:\n        The file extension (including the dot), or an empty string if no extension is found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.ospathfilename", "modulename": "gistools.utils", "qualname": "ospathfilename", "kind": "function", "doc": "<p>Gets the filename (without the extension) from a filepath using the os.path.splitext function.</p>\n\n<p>Args:\n        filename: The filepath to extract the filename from.</p>\n\n<p>Returns:\n        The filename (without the extension), or the entire filepath if no extension is found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.ospathjoin", "modulename": "gistools.utils", "qualname": "ospathjoin", "kind": "function", "doc": "<p>Joins a pathname and filename, handling potential None values.</p>\n\n<p>Args:\n        pathname: The pathname to join. Can be None if no pathname is required.\n        filename: The filename to join.</p>\n\n<p>Returns:\n        The joined path, or the filename itself if pathname is None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pathname</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.make_directory", "modulename": "gistools.utils", "qualname": "make_directory", "kind": "function", "doc": "<p>Creates a directory if it doesn't exist, optionally within a parent directory.</p>\n\n<p>Args:\n        path: The base path to create the directory in.\n        folder: The name of the subdirectory to create. If None, creates the directory at the specified path. Defaults to None.</p>\n\n<p>Returns:\n        The full path to the created directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_tsp_file", "modulename": "gistools.utils", "qualname": "is_tsp_file", "kind": "function", "doc": "<p>Checks if a filename represents a TSP (Traveling Salesperson Problem) file.</p>\n\n<p>Args:\n        filename: The filename to check.</p>\n\n<p>Returns:\n        True if the filename ends with '.tsp' (case-insensitive), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_vrp_file", "modulename": "gistools.utils", "qualname": "is_vrp_file", "kind": "function", "doc": "<p>Checks if a filename represents a VRP (Vehicle Routing Problem) file.</p>\n\n<p>Args:\n        filename: The filename to check.</p>\n\n<p>Returns:\n        True if the filename ends with '.vrp' (case-insensitive), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_csv_file", "modulename": "gistools.utils", "qualname": "is_csv_file", "kind": "function", "doc": "<p>Checks if a filename represents a CSV (Comma-Separated Values) file.</p>\n\n<p>Args:\n        filename: The filename to check.</p>\n\n<p>Returns:\n        True if the filename ends with '.csv' (case-insensitive), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.is_json", "modulename": "gistools.utils", "qualname": "is_json", "kind": "function", "doc": "<p>Checks if a filename represents a JSON (JavaScript Object Notation) file.</p>\n\n<p>Args:\n        filename: The filename to check.</p>\n\n<p>Returns:\n        True if the filename ends with '.json' (case-insensitive), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.read_dataframe", "modulename": "gistools.utils", "qualname": "read_dataframe", "kind": "function", "doc": "<p>Reads a CSV file into a Pandas DataFrame.</p>\n\n<p>Args:\n        filename: The name of the CSV file.\n        pathname: The optional pathname of the directory containing the file. Defaults to None.\n        columns: A list of column names to read. If None, reads all columns. Defaults to None.\n        encoding: The encoding of the CSV file. Defaults to 'utf-8'.\n        delimiter: The delimiter used in the CSV file. Defaults to ';'.\n        decode: If True, decodes the file using 'utf-16' encoding. Defaults to False.\n        index: The name of the column to use as the index. If None, no index is set. Defaults to None.</p>\n\n<p>Returns:\n        A Pandas DataFrame containing the data from the CSV file.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">decode</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_dataframe", "modulename": "gistools.utils", "qualname": "to_dataframe", "kind": "function", "doc": "<p>Saves a Pandas DataFrame to a CSV file.</p>\n\n<p>Args:\n        dataframe: The Pandas DataFrame to save.\n        filename: The name of the CSV file to save.\n        pathname: The optional pathname of the directory to save the file in. Defaults to None.\n        encoding: The encoding to use for the CSV file. Defaults to 'utf-8'.\n        delimiter: The delimiter to use in the CSV file. Defaults to ';'.\n        with_index: If True, includes the index in the CSV file. Defaults to False.\n        usecols: A list of column names to save. If None, saves all columns. Defaults to None.</p>\n\n<p>Returns:\n        None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataframe</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">with_index</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.read_pickle", "modulename": "gistools.utils", "qualname": "read_pickle", "kind": "function", "doc": "<p>Reads a pickled object from a file, handling DataFrames and general objects.</p>\n\n<p>Args:\n        filename: The name of the pickled file.\n        pathname: The optional pathname of the directory containing the file. Defaults to None.\n        from_: If 'dataframe', assumes the file contains a pickled DataFrame. Otherwise, reads as a general pickled object. Defaults to None.</p>\n\n<p>Returns:\n        The loaded object (DataFrame or general object).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">from_</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_pickle", "modulename": "gistools.utils", "qualname": "to_pickle", "kind": "function", "doc": "<p>Saves an object to a pickle file, handling DataFrames and general objects.</p>\n\n<p>Args:\n        obj: The object to save. Can be a Pandas DataFrame or any other picklable object.\n        filename: The name of the pickle file to save.\n        pathname: The optional pathname of the directory to save the file in. Defaults to None.</p>\n\n<p>Returns:\n        None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.read_json", "modulename": "gistools.utils", "qualname": "read_json", "kind": "function", "doc": "<p>Reads a JSON file into a dictionary.</p>\n\n<p>Args:\n        filename: The name of the JSON file.\n        pathname: The optional pathname of the directory containing the file. Defaults to None.</p>\n\n<p>Returns:\n        A dictionary containing the data from the JSON file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_json", "modulename": "gistools.utils", "qualname": "to_json", "kind": "function", "doc": "<p>Saves a dictionary to a JSON file.</p>\n\n<p>Args:\n        json_dict: The dictionary to save as JSON.\n        filename: The name of the JSON file to save.\n        pathname: The optional pathname of the directory to save the file in. Defaults to None.\n        indent: The number of spaces to use for indentation in the output JSON. Defaults to 4.</p>\n\n<p>Returns:\n        None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_dict</span>, </span><span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.read_csv", "modulename": "gistools.utils", "qualname": "read_csv", "kind": "function", "doc": "<p>Reads a CSV file into a list of dictionaries.</p>\n\n<p>Args:\n        filename: The name of the CSV file.\n        pathname: The optional pathname of the directory containing the file. Defaults to None.\n        delimiter: The delimiter used in the CSV file. Defaults to ';'.</p>\n\n<p>Returns:\n        A list of dictionaries, where each dictionary represents a row in the CSV file.\n        The keys of the dictionaries are the column names from the CSV file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "gistools.utils.to_csv", "modulename": "gistools.utils", "qualname": "to_csv", "kind": "function", "doc": "<p>Saves data to a CSV file, handling lists of dictionaries, DataFrames, and GeoDataFrames.</p>\n\n<p>Args:\n        data: The data to save. Can be a list of dictionaries, a Pandas DataFrame, or a GeoDataFrame.\n        filename: The name of the CSV file to save.\n        pathname: The optional pathname of the directory to save the file in. Defaults to None.\n        encoding: The encoding to use for the CSV file. Defaults to 'utf-8'.\n        delimiter: The delimiter to use in the CSV file. Defaults to ';'.\n        with_index: If True, includes the index in the CSV file. Defaults to False.\n        usecols: A list of column names to save. If None, saves all columns. Defaults to None.</p>\n\n<p>Returns:\n        None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span>,</span><span class=\"param\">\t<span class=\"n\">pathname</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">with_index</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">usecols</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();